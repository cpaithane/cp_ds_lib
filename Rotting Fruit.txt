Rotting Fruit

You are given a 2-D matrix grid. Each cell can have one of three possible values:

0 representing an empty cell
1 representing a fresh fruit
2 representing a rotten fruit
Every minute, if a fresh fruit is horizontally or vertically adjacent to a rotten fruit, then the fresh fruit also becomes rotten.

Return the minimum number of minutes that must elapse until there are zero fresh fruits remaining. If this state is impossible within the grid, return -1.

Input: grid = [[1,1,0],[0,1,1],[0,1,2]]

Output: 4

Input: grid = [[1,0,1],[0,2,0],[1,0,1]]

Output: -1

Constraints:

1 <= grid.length, grid[i].length <= 10

You should aim for a solution with O(m * n) time and O(m * n) space, where m is the number of rows and n is the number of columns in the given grid.

class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        q = deque()
        rows = len(grid)
        cols = len(grid[0])
        visited = set()
        fresh = 0

        # Add fresh fruit to the queue.
        def add_queue(r, c):
            nonlocal fresh
            if (r < 0 or r >= rows or
                c < 0 or c >= cols or
                (r, c) in visited or
                grid[r][c] == 2 or
                grid[r][c] == 0):
                return

            fresh -= 1
            q.append((r, c))
            visited.add((r, c))

        # Store all rotten fruits in a queue
        for r in range(rows):
            for c in range(cols):
                if grid[r][c] == 2:
                    q.append((r, c))
                    visited.add((r, c))
                elif grid[r][c] == 1:
                    fresh += 1

        # Traverse layer by layer
        # Add the fresh fruit to the q every minute.
        mins = 0
        while fresh > 0 and q:
            for i in range(len(q)):
                r, c = q.popleft()
                grid[r][c] = 2
                add_queue(r + 1, c)
                add_queue(r - 1, c)
                add_queue(r, c + 1)
                add_queue(r, c - 1)

            mins += 1
        
        # Check if there is any fresh fruit.
        if fresh == 0:
            return mins
        return -1