Count Good Nodes in Binary Tree

Within a binary tree, a node x is considered good if the path from the root of the tree to the node x contains no nodes with a value greater than the value of node x

Given the root of a binary tree root, return the number of good nodes within the tree.

Input: root = [2,1,1,3,null,1,5]

Output: 3

Input: root = [1,2,-1,3,4]

Output: 4

You should aim for a solution with O(n) time andO(n) space, where n is the number of nodes in the given tree.

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def goodNodes(self, root: TreeNode) -> int:
        good = 0
        max_val = -math.inf

        def dfs(root, max_val):
            nonlocal good

            if root == None:
                return

            if root.val >= max_val:
                good += 1
                max_val = max(root.val, max_val)

            if root.left != None:
                dfs(root.left, max_val)

            if root.right != None:
                dfs(root.right, max_val)

        dfs(root, max_val)
        return good
