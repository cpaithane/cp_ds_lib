Longest Repeating Character Replacement

You are given a string s consisting of only uppercase english characters and an integer k. You can choose up to k characters of the string and replace them with any other uppercase English character.

After performing at most k replacements, return the length of the longest substring which contains only one distinct character.

Input: s = "XYYX", k = 2

Output: 4

Explanation: Either replace the 'X's with 'Y's, or replace the 'Y's with 'X's.

Input: s = "AAABABB", k = 1

Output: 5

Constraints:

1 <= s.length <= 1000
0 <= k <= s.length

You should aim for a solution with O(n) time and O(m) space, where n is the length of the given string and m is the number of unique characters in the string.

class Solution:
    def characterReplacement(self, s: str, k: int) -> int:
        count_dict = {}
        l = 0
        max_freq = 0
        res = 0

        #
        # window_len - most_freq_char is the no. of chars to be replaced.
        # E.g. AAABA => W_len = 5, freq_max = 4 (freq of A) (5 - 4) = 1
        # 1 char can be replaced.
        #

        # Go through string s.
        # l points to 0, r points to 0 initially.
        # len_window = 1
        for r in range(len(s)):
            # Find out freq of s[r] and max_freq char in the window
            freq = 1 + count_dict.get(s[r], 0)
            count_dict[s[r]] = freq
            max_freq = max(freq, max_freq)

            #
            # Shrink the sliding window when no. of  chars to replace with exceeds k
            #
            while (r - l + 1) - max_freq > k:
                count_dict[s[l]] -= 1
                l += 1
                
            # Calculate res in this iteration
            res = max((r - l + 1), res)

        return res
        