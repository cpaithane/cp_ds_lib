Given a string s, return true if it is a palindrome, otherwise return false.
A palindrome is a string that reads the same forward and backward. It is also case-insensitive and ignores all non-alphanumeric characters.

Input: s = "Was it a car or a cat I saw?"

Output: true
Explanation: After considering only alphanumerical characters we have "wasitacaroracatisaw", which is a palindrome.

Input: s = "tab a cat"

Output: false

Explanation: "tabacat" is not a palindrome.
Constraints:
•	1 <= s.length <= 1000
•	s is made up of only printable ASCII characters.

You should aim for a solution with O(n) time and O(1) space, where n is the length of the input string.


#include <cctype>

class Solution {
public:
    bool isPalindrome(string s) {
        int head = 0;
        int tail = s.size() - 1;
        
        while (head < tail) {
            /*
             * Traverse the string till first alpha-numeric char encounters.
             */
            while (head < tail && !isalnum(s[head])) {
                head++;
            }
            
            /*
             * Traverse the string backwards till first alpha-numeric char encounters.
             */
            while (tail > 0 && !isalnum(s[tail])) {
                tail--;
            }

            /*
             * A case where both pointers are crossed or at the same position.
             * E.g. "....."
             * E.g. "a."
             */
            if (head >= tail) {
                return true;
            }

            /*
             * Ignoring non-alpha numeric chars from both ends, the 
             * chars should match at both ends. If not, then string is
             * not palindrome.
             */
            if (toupper(s[head]) != toupper(s[tail])) {
                return false;
            }
            head++;
            tail--;
        }
        return true;
    }
};


