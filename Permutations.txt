Permutations

Given an array nums of unique integers, return all the possible permutations. You may return the answer in any order.

Input: nums = [1,2,3]

Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

Input: nums = [7]

Output: [[7]]

1 <= nums.length <= 6
-10 <= nums[i] <= 10

You should aim for a solution with O(n * n!) time and O(n) space, where n is the size of the input array.

class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        res_list = []
        res = []
        visited = [False] * len(nums)

        def permuteCore(res, visited):
            if len(nums) == len(res):
                res_list.append(res.copy())
                return

            for i in range(0, len(nums)):
                if visited[i] == True:
                    continue

                visited[i] = True
                res.append(nums[i])
                permuteCore(res, visited)
                res.pop()
                visited[i] = False

        permuteCore(res, visited)
        return res_list