Maximum Subarray

Given an array of integers nums, find the subarray with the largest sum and return the sum.

A subarray is a contiguous non-empty sequence of elements within an array.

Input: nums = [2,-3,4,-2,2,1,-1,4]

Output: 8

Explanation: The subarray [4,-2,2,1,-1,4] has the largest sum 8.

Input: nums = [-1]

Output: -1

Constraints:

1 <= nums.length <= 1000
-1000 <= nums[i] <= 1000

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        # Kadane's Algorithm
        cur_sum = 0
        max_sum = nums[0]

        for num in nums:
            if cur_sum < 0:
                cur_sum = 0

            cur_sum += num
            max_sum = max(max_sum, cur_sum)

        return max_sum

    # DP
    # include nums[i] + dfs(i + 1)
    # Don't include nums[i] + dfs(i + 1)
    #

