K Closest Points to Origin

You are given an 2-D array points where points[i] = [xi, yi] represents the coordinates of a point on an X-Y axis plane. You are also given an integer k.

Return the k closest points to the origin (0, 0).

The distance between two points is defined as the Euclidean distance (sqrt((x1 - x2)^2 + (y1 - y2)^2)).

You may return the answer in any order.

Input: points = [[0,2],[2,2]], k = 1

Output: [[0,2]]

Explanation : The distance between (0, 2) and the origin (0, 0) is 2. The distance between (2, 2) and the origin is sqrt(2^2 + 2^2) = 2.82842. So the closest point to the origin is (0, 2).

Input: points = [[0,2],[2,0],[2,2]], k = 2

Output: [[0,2],[2,0]]

Explanation: The output [2,0],[0,2] would also be accepted.

You should aim for a solution as good or better than O(nlogk) time and O(k) space, where n is the size of the input array, and k is the number of points to be returned.

from heapq import heappop, heappush, heapify

class Solution:
    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:
        res_list = []
        heap = []
        heapify(heap)

        for point in points:
            dist = math.sqrt(pow((point[0] - 0), 2) + pow((point[1] - 0), 2))

            if len(heap) < k:
                heappush(heap, ((-1 * dist), point))
            else:
                top_dist, top_point = heappop(heap)
                top_dist = -1 * top_dist

                if top_dist > dist:
                    heappush(heap, ((-1 * dist), point))
                else:
                    heappush(heap, ((-1 * top_dist), top_point))
        
        for info in heap:
            res_list.append(info[1])

        return res_list