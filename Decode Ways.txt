Decode Ways

A string consisting of uppercase english characters can be encoded to a number using the following mapping:

'A' -> "1"
'B' -> "2"
...
'Z' -> "26"

To decode a message, digits must be grouped and then mapped back into letters using the reverse of the mapping above. There may be multiple ways to decode a message. For example, "1012" can be mapped into:

"JAB" with the grouping (10 1 2)
"JL" with the grouping (10 12)
The grouping (1 01 2) is invalid because 01 cannot be mapped into a letter since it contains a leading zero.

Given a string s containing only digits, return the number of ways to decode it. You can assume that the answer fits in a 32-bit integer.

Input: s = "12"

Output: 2

Explanation: "12" could be decoded as "AB" (1 2) or "L" (12).

Input: s = "01"

Output: 0

Explanation: "01" cannot be decoded because "01" cannot be mapped into a letter.

Constraints:

1 <= s.length <= 100
s consists of digits

You should aim for a solution as good or better than O(n) time and O(n) space, where n is the length of the given string.

class Solution:
    def numDecodings(self, s: str) -> int:
        def dfs(i):
            # End condition
            if i == len(s):
                return 1
            if s[i] == "0":
                return 0

            res = dfs(i + 1)
            if i + 1 < len(s) and (s[i] == "1" or s[i] == "2" and s[i + 1] in "0123456"):
                res += dfs(i + 2)

            return res

        return dfs(0)

        dp = [-1] * (len(s) + 1)
        dp[len(s)] = 1

        def dfs(i):
            if dp[i] != -1:
                return dp[i]

            if s[i] == "0":
                return 0

            # Include next consecutive
            res1 = dfs(i+1)
            res2 = 0
            # Include next consecutive depending on conditions
            if i + 1 < len(s) and (s[i] == "1" or s[i] == "2" and s[i+1] in "0123456"):
                res2 = dfs(i + 2)

            dp[i] = res1 + res2
            return dp[i]

        return dfs(0)

        dp = {len(s) : 1}

        def dfs(i):
            if i in dp:
                return dp[i]

            if s[i] == "0":
                return 0

            res = dfs(i + 1)
            if i + 1 < len(s) and (
                s[i] == "1" or s[i] == "2" and s[i + 1] in "0123456"
                ):
                res += dfs(i + 2)

            dp[i] = res
            return dp[i]

        return dfs(0)

class Solution:
    def numDecodings(self, s: str) -> int:
        dp = {len(s) : 1}

        def dfs(i):
            if i in dp:
                return dp[i]

            if s[i] == "0":
                return 0

            res = dfs(i + 1)
            if i + 1 < len(s) and (
                s[i] == "1" or s[i] == "2" and s[i + 1] in "0123456"
                ):
                res += dfs(i + 2)

            dp[i] = res
            return dp[i]

        return dfs(0)