Invert Binary Tree
Solved 
You are given the root of a binary tree root. Invert the binary tree and return its root.

Input: root = [1,2,3,4,5,6,7]

Output: [1,3,2,7,6,5,4]

Input: root = [3,2,1]

Output: [3,1,2]

Input: root = []

Output: []

Constraints:

0 <= The number of nodes in the tree <= 100.
-100 <= Node.val <= 100

You should aim for a solution with O(n) time and O(n) space, where n is the number of nodes in the tree.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
       /*
        * Use recursion for simple code. Using stack adds complexity in code
        * without much return in saving time and space complexity.
        */
        /* If empty tree. */
        if (root == NULL) {
            return root;
        }
        
        /* Leaf node. */
        if (root->left == NULL && root->right == NULL) {
            return root;
        }

        /*
         * Traverse in post order form.
         */
        TreeNode *left = invertTree(root->left);
        TreeNode *right = invertTree(root->right);

        /* Swap left subtree with right subtree of the root. */
        TreeNode *tmp = left;
        root->left = right;
        root->right = tmp;
        
        /* Return the root. */
        return root;
    }
};
