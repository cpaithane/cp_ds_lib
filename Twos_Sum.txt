Two Sum
Solved 
Given an array of integers nums and an integer target, return the indices i and j such that nums[i] + nums[j] == target and i != j.

You may assume that every input has exactly one pair of indices i and j that satisfy the condition.

Return the answer with the smaller index first.

Input: 
nums = [3,4,5,6], target = 7

Output: [0,1]

Input: nums = [4,5,6], target = 10

Output: [0,2]

Input: nums = [5,5], target = 10

Output: [0,1]

Constraints:

2 <= nums.length <= 1000
-10,000,000 <= nums[i] <= 10,000,000
-10,000,000 <= target <= 10,000,000

You should aim for a solution with O(n) time and O(n) space, where n is the size of the input array.

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> hash;
        vector<int> res = {};

        /* Iterate through vector and insert number and index in hash. */
        for (int i = 0; i < nums.size(); i++) {
            hash[nums[i]] = i;
        }

        for (int i = 0; i < nums.size(); i++) {
            int diff = target - nums[i];

            /* If difference is found in hash with different indices, return the vector. */
            auto it = hash.find(diff);
            if (it != hash.end() && it->second != i) {
                res.push_back(i);
                res.push_back(it->second);
                return res;
            }
        }
        return res;
    }
};
