Partition Equal Subset Sum

You are given an array of positive integers nums.

Return true if you can partition the array into two subsets, subset1 and subset2 where sum(subset1) == sum(subset2). Otherwise, return false.

Input: nums = [1,2,3,4]

Output: true

Explanation: The array can be partitioned as [1, 4] and [2, 3].

Input: nums = [1,2,3,4,5]

Output: false

Constraints:

1 <= nums.length <= 100
1 <= nums[i] <= 50

class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        total = 0
        for num in nums:
            total += num

        if total % 2 == 1:
            return False

        n = len(nums)
        target = total // 2
        dp = []
        for i in range(0, len(nums) + 1):
            dp.append([False] * (target + 1))

        # When total is 0, return True.
        for i in range(0, len(nums) + 1):
            dp[i][0] = True

        for i in range(1, len(nums) + 1):
            for j in range(1, target + 1):
                # Include or don't include
                # If included, then go for t - nums[i-1]
                if nums[i - 1] <= j:
                    dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]
                else:
                    dp[i][j] = dp[i - 1][j]

        return dp[n][target]

        total = 0
        for num in nums:
            total += num

        if total % 2 == 1:
            return False

        def recurse(i, t):
            # Base cases
            if i >= len(nums):
                return t == 0

            if t < 0:
                return False

            return (recurse(i + 1, t) or recurse(i + 1, t - nums[i]))

        return recurse(0, total // 2)