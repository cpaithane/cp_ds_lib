Kth Smallest Integer in BST

Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) in the tree.

A binary search tree satisfies the following constraints:

The left subtree of every node contains only nodes with keys less than the node's key.
The right subtree of every node contains only nodes with keys greater than the node's key.
Both the left and right subtrees are also binary search trees.

Input: root = [2,1,3], k = 1

Output: 1

Input: root = [4,3,5,2,null], k = 4

Output: 5

You should aim for a solution as good or better than O(n) time and O(n) space, where n is the number of nodes in the given tree.

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:
        visited = 0
        kth_element = math.inf

        def inorder(root):
            nonlocal visited
            nonlocal kth_element

            if root == None:
                return

            inorder(root.left)

            visited += 1
            if visited == k:
                kth_element = root.val
                return

            inorder(root.right)

        inorder(root)
        return kth_element