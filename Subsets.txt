Subsets
Solved 
Given an array nums of unique integers, return all possible subsets of nums.

The solution set must not contain duplicate subsets. You may return the solution in any order.

Input: nums = [1,2,3]

Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]

Input: nums = [7]

Output: [[],[7]]

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10

You should aim for a solution with O(n * (2^n)) time and O(n) space, where n is the size of the input array.

class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        /* Empty set */
        vector<vector<int>> res = {{}};

        /* For every member in input vector.*/
        for (int num : nums) {
            int size = res.size();

            /*
             * For every vector in res, create cur_subset by
             * inserting num. Push the cur_subset in res.
             */
            for (int i = 0; i < size; i++) {
                vector<int> cur_subset = res[i];
                cur_subset.push_back(num);
                res.push_back(cur_subset);
            }
        }
        return res;
    }
};
