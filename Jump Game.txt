Jump Game

You are given an integer array nums where each element nums[i] indicates your maximum jump length at that position.

Return true if you can reach the last index starting from index 0, or false otherwise.

Input: nums = [1,2,0,1,0]

Output: true

Explanation: First jump from index 0 to 1, then from index 1 to 3, and lastly from index 3 to 4.

Input: nums = [1,2,1,0,1]

Output: false

Constraints:

1 <= nums.length <= 1000
0 <= nums[i] <= 1000

class Solution:
    def canJump(self, nums: List[int]) -> bool:
        # Greedy
        target = len(nums) - 1

        for i in range(len(nums) - 1, -1, -1):
            # Shift the target post if you can reach target from i
            if i + nums[i] >= target:
                target = i

        return i == target

        # DP
        dp = {}
        def recurse(i):
            if i == len(nums) - 1:
                return True

            if i in dp:
                return dp[i]

            if nums[i] == 0:
                return False

            end = min(i + nums[i], len(nums) - 1)
            for j in range(i + 1, end + 1):
                if recurse(j) == True:
                    dp[i] = True
                    return True

            dp[i] = False
            return False

        return recurse(0)

        # Recursive solution
        def recurse(i):
            if i == len(nums) - 1:
                return True

            end = min(i + nums[i], len(nums) - 1)
            for j in range(i + 1, end + 1):
                if recurse(j) == True:
                    return True

            return False

        return recurse(0)