Burst Balloons

You are given an array of integers nums of size n. The ith element represents a balloon with an integer value of nums[i]. You must burst all of the balloons.

If you burst the ith balloon, you will receive nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then assume the out of bounds value is 1.

Return the maximum number of coins you can receive by bursting all of the balloons.

Input: nums = [4,2,3,7]

Output: 167

Explanation:
nums = [4,2,3,7] --> [4,3,7] --> [4,7] --> [7] --> []
coins =  4*2*3    +   4*3*7   +  1*4*7  + 1*7*1 = 143

Constraints:

n == nums.length
1 <= n <= 300
0 <= nums[i] <= 100

class Solution:
    def maxCoins(self, nums: List[int]) -> int:
        # DP Solution -> S : O(n^2), T : O(n^3)
        nums = [1] + nums + [1]
        dp = {}

        def recurse(l, r):
            if l > r:
                return 0

            if (l, r) in dp:
                return dp[(l, r)]

            # Calculate the result later
            dp[(l, r)] = 0
            for i in range(l, r + 1):
                coins = nums[l - 1] * nums[i] * nums[r + 1]
                coins += recurse(l, i - 1) + recurse(i + 1, r)
                dp[(l, r)] = max(dp[(l, r)], coins)

            return dp[(l, r)]

        return recurse(1, len(nums) - 2)

        # DP Solution -> S : O(n^2), T : O(n * 2^n)
        nums = [1] + nums + [1]
        dp = {}

        def recurse(l, r):
            if l > r:
                return 0

            if (l, r) in dp:
                return dp[(l, r)]

            max_coins = 0
            for i in range(l, r + 1):
                coins = nums[l - 1] * nums[i] * nums[r + 1]
                coins += recurse(l, i - 1) + recurse(i + 1, r)
                max_coins = max(max_coins, coins)

            dp[(l, r)] = max_coins
            return max_coins

        return recurse(1, len(nums) - 2)

        # Recursive solution - > T : O(n * 2^n), S : O(n * 2^n)
        # Append 1 at both the ends of input array
        # to avoid checking for corner cases
        nums = [1] + nums + [1]

        def recurse(nums):
            if len(nums) == 2:
                return 0

            # Calculate max_coins by bursting the current coin
            max_coins = 0
            for i in range(1, len(nums) - 1):
                coins = nums[i - 1] * nums[i] * nums[i + 1]
                coins += recurse(nums[:i] + nums[i+1:])
                max_coins = max(max_coins, coins)

            return max_coins

        return recurse(nums)