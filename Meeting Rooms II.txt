Meeting Rooms II

Given an array of meeting time interval objects consisting of start and end times [[start_1,end_1],[start_2,end_2],...] (start_i < end_i), find the minimum number of days required to schedule all meetings without any conflicts.

Input: intervals = [(0,40),(5,10),(15,20)]

Output: 2

Explanation:
day1: (0,40)
day2: (5,10),(15,20)


Input: intervals = [(4,9)]

Output: 1

Note:

(0,8),(8,10) is not considered a conflict at 8
Constraints:

0 <= intervals.length <= 500
0 <= intervals[i].start < intervals[i].end <= 1,000,000

"""
Definition of Interval:
class Interval(object):
    def __init__(self, start, end):
        self.start = start
        self.end = end
"""

from heapq import heapify, heappush, heappop

class Solution:
    def minMeetingRooms(self, intervals: List[Interval]) -> int:
        # First simple solution is to use DP.
        # Second is to use min-heap to store end of the interval
        intervals.sort(key = lambda x: x.start)
        min_heap = []
        heapify(min_heap)

        for interval in intervals:
            # Store only overlapping intervals in min_heap. At the end,
            # min_heap will hold overlapping intervals.
            if len(min_heap) > 0 and min_heap[0] <= interval.start:
                heappop(min_heap)

            heappush(min_heap, interval.end)

        return len(min_heap)