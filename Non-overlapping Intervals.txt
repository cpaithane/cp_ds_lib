Non-overlapping Intervals

Given an array of intervals intervals where intervals[i] = [start_i, end_i], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.

Note: Intervals are non-overlapping even if they have a common point. For example, [1, 3] and [2, 4] are overlapping, but [1, 2] and [2, 3] are non-overlapping.

Input: intervals = [[1,2],[2,4],[1,4]]

Output: 1

Explanation: After [1,4] is removed, the rest of the intervals are non-overlapping.

Input: intervals = [[1,2],[2,4]]

Output: 0

class Solution:
    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:
        intervals.sort()
        res = 0
        prev_end = intervals[0][1]

        for i in range(1, len(intervals)):
            interval = intervals[i]
            # Non overlapping interval case [1, 2], [3, 4] or [1, 2], [2, 4]
            if interval[0] >= prev_end:
                prev_end = interval[1]
            else:
                # Overlapping case [1, 2], [1, 4]
                prev_end = min(prev_end, interval[1])
                res += 1

        return res