Valid Palindromes II

Given a string s, return true if the s can be palindrome after deleting at most one character from it.

Example 1:

Input: s = "aba"
Output: true
Example 2:

Input: s = "abca"
Output: true
Explanation: You could delete the character 'c'.
Example 3:

Input: s = "abc"
Output: false

Constraints:

1 <= s.length <= 105
s consists of lowercase English letters.

class Solution:
    def validPalindrome(self, s: str) -> bool:
        def is_palindrome(s, l, r):
            while l <= r:
                if s[l] == s[r]:
                    l += 1
                    r -= 1
                else:
                    return False
            
            return True

        l = 0
        r = len(s) - 1
        removed = False
        while l <= r:
            if s[l] == s[r]:
                l += 1
                r -= 1
            else:
                if removed == False and is_palindrome(s, l + 1, r):
                    l += 1
                    removed = True
                    continue
                
                if removed == False and is_palindrome(s, l, r - 1):
                    r -= 1
                    removed = True
                    continue

                return False
        
        return True