Merge Intervals

Given an array of intervals where intervals[i] = [start_i, end_i], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

You may return the answer in any order.

Note: Intervals are non-overlapping if they have no common point. For example, [1, 2] and [3, 4] are non-overlapping, but [1, 2] and [2, 3] are overlapping.


Input: intervals = [[1,3],[1,5],[6,7]]

Output: [[1,5],[6,7]]

Input: intervals = [[1,2],[2,3]]

Output: [[1,3]]

Constraints:

1 <= intervals.length <= 1000
intervals[i].length == 2
0 <= start <= end <= 1000

class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        res_list = [] # Stitch the list
        total = len(intervals)

        # Sort the intervals on start of the interval
        intervals.sort()
        if total > 0:
            res_list.append(intervals[0])

        # Store the result in res_list and compare the last appended res with interval
        for interval in intervals:
            last_inserted = res_list[-1]

            # If overlapping intervals, then update the result
            if interval[0] <= last_inserted[1]:
                res_list[-1][1] = max(last_inserted[1], interval[1])
            else:
                res_list.append(interval)

        return res_list