Design Add and Search Word Data Structure

Design a data structure that supports adding new words and searching for existing words.

Implement the WordDictionary class:

void addWord(word) Adds word to the data structure.
bool search(word) Returns true if there is any string in the data structure that matches word or false otherwise. word may contain dots '.' where dots can be matched with any letter.

Input:
["WordDictionary", "addWord", "day", "addWord", "bay", "addWord", "may", "search", "say", "search", "day", "search", ".ay", "search", "b.."]

Output:
[null, null, null, null, false, true, true, true]

Explanation:
WordDictionary wordDictionary = new WordDictionary();
wordDictionary.addWord("day");
wordDictionary.addWord("bay");
wordDictionary.addWord("may");
wordDictionary.search("say"); // return false
wordDictionary.search("day"); // return true
wordDictionary.search(".ay"); // return true
wordDictionary.search("b.."); // return true

Constraints:

1 <= word.length <= 20
word in addWord consists of lowercase English letters.
word in search consist of '.' or lowercase English letters.

You should aim for a solution with O(n) time for each function call and O(t + n) space, where n is the length of the string and t is the total number of nodes created in the Trie.

class TrieNode:
    def __init__(self):
        self.children = {}
        self.ends = False

class WordDictionary:

    def __init__(self):
        self.root = TrieNode()

    def addWord(self, word: str) -> None:
        root = self.root

        for ch in word:            
            if ch not in root.children:
                root.children[ch] = TrieNode()
            root = root.children[ch]

        root.ends = True

    def search(self, word: str) -> bool:
        root = self.root

        def searchCore(root, word, idx):

            for i in range(idx, len(word)):
                ch = word[i]
                if ch == '.':
                    for child in root.children.values():
                        if searchCore(child, word, i + 1):
                            return True
                    return False
                else:
                    if ch not in root.children:
                        return False
                    root = root.children[ch]

            return root.ends

        return searchCore(root, word, 0)