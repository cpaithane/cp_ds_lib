Implement Trie (Prefix Tree)
Solved 
A prefix tree (also known as a trie) is a tree data structure used to efficiently store and retrieve keys in a set of strings. Some applications of this data structure include auto-complete and spell checker systems.

Implement the PrefixTree class:

PrefixTree() Initializes the prefix tree object.
void insert(String word) Inserts the string word into the prefix tree.
boolean search(String word) Returns true if the string word is in the prefix tree (i.e., was inserted before), and false otherwise.
boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.

Input: 
["Trie", "insert", "dog", "search", "dog", "search", "do", "startsWith", "do", "insert", "do", "search", "do"]

Output:
[null, null, true, false, true, null, true]

Explanation:
PrefixTree prefixTree = new PrefixTree();
prefixTree.insert("dog");
prefixTree.search("dog");    // return true
prefixTree.search("do");     // return false
prefixTree.startsWith("do"); // return true
prefixTree.insert("do");
prefixTree.search("do");     // return true

Constraints:

1 <= word.length, prefix.length <= 1000
word and prefix are made up of lowercase English letters.

You should aim for a solution with O(n) time for each function call and O(t) space, where n is the length of the given string and t is the total number of nodes created in the Trie.

#include <string>

#define MAX_CHARS 26

typedef struct TrieNode {
    char trie_chars[MAX_CHARS];
    bool ends[MAX_CHARS];
    TrieNode *children[MAX_CHARS];
} TrieNode;

class PrefixTree {
private:
    TrieNode *root;

public:
    void init(TrieNode *node) {
        for (int i = 0; i < MAX_CHARS; i++) {
            node->trie_chars[i] = (char) (i + 97);
            node->children[i] = NULL;
            node->ends[i] = false;
        }
        return;
    }

    PrefixTree() {
        root = new TrieNode();
        init(root);
    }
    
    void insert(string word) {
        TrieNode *tmp_root = root;
        int i = 0;
        int len = word.size();
        int idx = (char)(word[0] - 97);

        while (i < len) {
            char ch = word[i];
            idx = (int) (ch - 97);
            if (tmp_root->children[idx] == NULL) {
                tmp_root->children[idx] = new TrieNode();
            }
            tmp_root = tmp_root->children[idx];
            i++;
        }
        tmp_root->ends[idx] = true;
        cout << endl;
    }
    
    bool search(string word) {
        TrieNode *tmp_root = root;
        int i = 0;
        int len = word.size();
        int idx = (char)(word[0] - 97);

        while (i < len) {
            char ch = word[i];
            idx = (int) (ch - 97);

            if (tmp_root->children[idx] != NULL) {
                tmp_root = tmp_root->children[idx];
            } else {
                return false;
            }
            i++;
        }

        return tmp_root->ends[idx];
    }
    
    bool startsWith(string prefix) {
        TrieNode *tmp_root = root;
        int i = 0;
        int len = prefix.size();

        while (i < len) {
            char ch = prefix[i];
            int idx = (int) (ch - 97);

            if (tmp_root->children[idx] != NULL) {
                tmp_root = tmp_root->children[idx];
            } else {
                return false;
            }
            i++;
        }
        return true;
    }
};

