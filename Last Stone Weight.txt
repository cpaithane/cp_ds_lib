Last Stone Weight

You are given an array of integers stones where stones[i] represents the weight of the ith stone.

We want to run a simulation on the stones as follows:

At each step we choose the two heaviest stones, with weight x and y and smash them togethers
If x == y, both stones are destroyed
If x < y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x.
Continue the simulation until there is no more than one stone remaining.

Return the weight of the last remaining stone or return 0 if none remain.

Input: stones = [2,3,6,2,4]

Output: 1

Explanation:
We smash 6 and 4 and are left with a 2, so the array becomes [2,3,2,2].
We smash 3 and 2 and are left with a 1, so the array becomes [1,2,2].
We smash 2 and 2, so the array becomes [1].

Example 2:


Input: stones = [1,2]

Output: 1

You should aim for a solution as good or better than O(nlogn) time and O(n) space, where n is the size of the input array.

from heapq import heappop, heappush, heapify

class Solution:
    def lastStoneWeight(self, stones: List[int]) -> int:
        heap = []

        heapify(heap)
        for v in stones:
            heappush(heap, -1 * v)

        while len(heap) > 1:
            h1 = -1 * heappop(heap)

            if len(heap) > 0:
                h2 = -1 * heappop(heap)
                if h1 != h2:
                    heappush(heap, -1 * (abs(h1 - h2)))

        if len(heap) == 0:
            return 0

        return -1 * heappop(heap)