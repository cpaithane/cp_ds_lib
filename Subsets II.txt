Subsets II

You are given an array nums of integers, which may contain duplicates. Return all possible subsets.

The solution must not contain duplicate subsets. You may return the solution in any order.

Input: nums = [1,2,1]

Output: [[],[1],[1,2],[1,1],[1,2,1],[2]]

Input: nums = [7,7]

Output: [[],[7], [7,7]]

You should aim for a solution as good or better than O(n * (2^n)) time and O(n) space, where n is the size of the input array.

class Solution:
    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:
        res_list = []
        res = []

        nums.sort()

        def recurse(idx, res):
            if idx == len(nums):
                res_list.append(res.copy())
                return

            res.append(nums[idx])
            recurse(idx + 1, res)
            res.pop()

            while idx + 1 < len(nums) and nums[idx] == nums[idx + 1]:
                idx += 1

            recurse(idx + 1, res)

        recurse(0, res)
        return res_list