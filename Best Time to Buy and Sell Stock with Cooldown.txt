Best Time to Buy and Sell Stock with Cooldown

You are given an integer array prices where prices[i] is the price of NeetCoin on the ith day.

You may buy and sell one NeetCoin multiple times with the following restrictions:

After you sell your NeetCoin, you cannot buy another one on the next day (i.e., there is a cooldown period of one day).
You may only own at most one NeetCoin at a time.
You may complete as many transactions as you like.

Return the maximum profit you can achieve.

Input: prices = [1,3,4,0,4]

Output: 6

Explanation: Buy on day 0 (price = 1) and sell on day 1 (price = 3), profit = 3-1 = 2. Then buy on day 3 (price = 0) and sell on day 4 (price = 4), profit = 4-0 = 4. Total profit is 2 + 4 = 6.

Input: prices = [1]

Output: 0

Constraints:

1 <= prices.length <= 5000
0 <= prices[i] <= 1000

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        dp = {}

        def maxProfitCore(i, buying):
            # Base case
            if i >= len(prices):
                return 0

            # If cached, return the cached value
            if (i, buying) in dp:
                return dp[(i, buying)]

            if buying:
                # Choice to buy or cool down
                buy_profit = maxProfitCore(i + 1, not buying) - prices[i]
                cool_profit = maxProfitCore(i + 1, buying)
                dp[(i, buying)] = max(buy_profit, cool_profit)
            else:
                # Choice to sell or cool down
                sell_profit = maxProfitCore(i + 2, not buying) + prices[i]
                cool_profit = maxProfitCore(i + 1, buying)
                dp[(i, buying)] = max(sell_profit, cool_profit)

            return dp[(i, buying)]

        return maxProfitCore(0, True)