Search in Rotated Sorted Array

You are given an array of length n which was originally sorted in ascending order. It has now been rotated between 1 and n times. For example, the array nums = [1,2,3,4,5,6] might become:

[3,4,5,6,1,2] if it was rotated 4 times.
[1,2,3,4,5,6] if it was rotated 6 times.
Given the rotated sorted array nums and an integer target, return the index of target within nums, or -1 if it is not present.

You may assume all elements in the sorted rotated array nums are unique,

A solution that runs in O(n) time is trivial, can you write an algorithm that runs in O(log n) time?

Input: nums = [3,4,5,6,1,2], target = 1

Output: 4

Input: nums = [3,5,6,0,1,2], target = 4

Output: -1

Constraints:

1 <= nums.length <= 1000
-1000 <= nums[i] <= 1000
-1000 <= target <= 1000

You should aim for a solution with O(logn) time and O(1) space, where n is the size of the input array.

class Solution:
    def search(self, nums: List[int], target: int) -> int:
        s = 0
        e = len(nums) - 1
        res = -1

        while s <= e:
            m = s + ((e - s) // 2)

            if nums[m] == target:
                res = m
                break

            # From s to m, elements are in right order
            if nums[s] <= nums[m]:
                # Check if t is falling in between
                if nums[s] <= target and target <= nums[m]:
                    e = m
                else:
                    s = m + 1
            else:
                # Check if t is falling in between
                if nums[m] <= target and target <= nums[e]:
                    s = m
                else:
                    e = m - 1
        
        return res
        