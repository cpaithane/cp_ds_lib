Find Minimum in Rotated Sorted Array
Find Minimum in Rotated Sorted Array
Solved 
You are given an array of length n which was originally sorted in ascending order. It has now been rotated between 1 and n times. For example, the array nums = [1,2,3,4,5,6] might become:

[3,4,5,6,1,2] if it was rotated 4 times.
[1,2,3,4,5,6] if it was rotated 6 times.
Notice that rotating the array 4 times moves the last four elements of the array to the beginning. Rotating the array 6 times produces the original array.

Assuming all elements in the rotated sorted array nums are unique, return the minimum element of this array.

A solution that runs in O(n) time is trivial, can you write an algorithm that runs in O(log n) time?


Input: nums = [3,4,5,6,1,2]

Output: 1

Input: nums = [4,5,0,1,2,3]

Output: 0

Input: nums = [4,5,6,7]

Output: 4

You should aim for a solution with O(logn) time and O(1) space, where n is the size of the input array.

class Solution:
    def findMin(self, nums: List[int]) -> int:
        s = 0
        e = len(nums) - 1
        res = nums[0]

        while s <= e:
            mid = (s + ((e - s) // 2))

            # Array between s and e is not rotated.
            # Then nums[s] is the minimum.
            if nums[s] < nums[e]:
                res = min(res, nums[s])
                break

            res = min(res, nums[mid])
            if nums[s] <= nums[mid]:
                s = mid + 1
            else:
                e = mid - 1

        return res