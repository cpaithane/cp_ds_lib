Median of Two Sorted Arrays

You are given two integer arrays nums1 and nums2 of size m and n respectively, where each is sorted in ascending order. Return the median value among all elements of the two arrays.

Your solution must run in 
O
(
l
o
g
(
m
+
n
)
)
O(log(m+n)) time.


Input: nums1 = [1,2], nums2 = [3]

Output: 2.0

Explanation: Among [1, 2, 3] the median is 2.

Input: nums1 = [1,3], nums2 = [2,4]

Output: 2.5

Explanation: Among [1, 2, 3, 4] the median is (2 + 3) / 2 = 2.5.

You should aim for a solution with O(log(min(n, m))) time and O(1) space, where n is the size of nums1 and m is the size of nums2.

class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        A, B = nums1, nums2
        if len(A) > len(B):
            A, B = B, A

        total = len(A) + len(B)
        half = total // 2

        l = 0
        r = len(A) - 1

        while True:
            i = (l + ((r - l) // 2))
            j = half - i - 2

            AL = A[i] if i >= 0 else float("-infinity")
            AR = A[i + 1] if (i + 1) < len(A) else float("infinity")

            BL = B[j] if j >= 0 else float("-infinity")
            BR = B[j + 1] if j < len(B) else float("infinity")

            if AL <= BR and BL <= AR:
                if total % 2:
                    return min(AR, BR)
                return (max(AL, BL) + min(AR, BR)) / 2
            elif AL > BR:
                r = i - 1
            else:
                l = i + 1