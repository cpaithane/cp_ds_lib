Merge Two Sorted Linked Lists

You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists into one sorted linked list and return the head of the new sorted linked list.

The new list should be made up of nodes from list1 and list2.

Input: list1 = [1,2,4], list2 = [1,3,5]

Output: [1,1,2,3,4,5]

Input: list1 = [], list2 = [1,2]

Output: [1,2]

Input: list1 = [], list2 = []

Output: []

You should aim for a solution with O(n + m) time and O(1) space, where n is the length of list1 and m is the length of list2.

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        # Set the head
        if list1 == None and list2 == None:
            return None
        elif list1 == None:
            return list2
        elif list2 == None:
            return list1

        resHead = resList = None
        head1 = list1
        head2 = list2

        while head1 != None and head2 != None:
            if head1.val < head2.val:
                if resHead != None:
                    resList.next = head1
                    resList = resList.next
                else:
                    resHead = head1
                    resList = head1
                
                head1 = head1.next
            else:
                if resHead != None:
                    resList.next = head2
                    resList = resList.next
                else:
                    resHead = head2
                    resList = head2

                head2 = head2.next

        if head1 != None:
            resList.next = head1
        else:
            resList.next = head2

        return resHead