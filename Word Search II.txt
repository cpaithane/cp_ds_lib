Word Search II

Given a 2-D grid of characters board and a list of strings words, return all words that are present in the grid.

For a word to be present it must be possible to form the word with a path in the board with horizontally or vertically neighboring cells. The same cell may not be used more than once in a word.

Input:
board = [
  ["a","b","c","d"],
  ["s","a","a","t"],
  ["a","c","k","e"],
  ["a","c","d","n"]
],
words = ["bat","cat","back","backend","stack"]

Output: ["cat","back","backend"]

Input:
board = [
  ["x","o"],
  ["x","o"]
],
words = ["xoxo"]

Output: []

Constraints:

1 <= board.length, board[i].length <= 10
board[i] consists only of lowercase English letter.
1 <= words.length <= 100
1 <= words[i].length <= 10
words[i] consists only of lowercase English letters.
All strings within words are distinct.

You should aim for a solution with O(m * n * 4 * (3^(t-1)) + s) time and O(s) space, where m is the number of rows, n is the number of columns, t is the maximum length of any word and s is the sum of the lengths of all the words.

class TrieNode:
    def __init__(self):
        self.children = {}
        self.ends = False

    def add_word(self, word: str) -> None:
        root = self

        for ch in word:
            if ch not in root.children:
                root.children[ch] = TrieNode()
            root = root.children[ch]

        root.ends = True

class Solution:
    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:
        # First add every word in the trie.
        root = TrieNode()
        for word in words:
            root.add_word(word)

        rows = len(board)
        cols = len(board[0])
        visited = set()
        res = set()

        def dfs(r, c, root, word):
            # Base conditions
            if (r < 0 or r >= rows or
                c < 0 or c >= cols or
                (r, c) in visited or
                board[r][c] not in root.children):
                return

            # Visit r, c
            visited.add((r, c))
            # Append the word and if word is found in Trie, add to the res.
            word += board[r][c]
            # Then move to the next node
            root = root.children[board[r][c]]
            if root.ends == True:
                res.add(word)
            
            dfs(r+1, c, root, word)
            dfs(r-1, c, root, word)
            dfs(r, c+1, root, word)
            dfs(r, c-1, root, word)

            # Removed from visited.
            visited.remove((r, c))

        # Go through board and check if board[r][c] is present in Trie
        for r in range(0, rows):
            for c in range(0, cols):
                dfs(r, c, root, "")

        return list(res)