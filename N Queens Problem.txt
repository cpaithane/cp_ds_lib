N-Queens
Solved 
The n-queens puzzle is the problem of placing n queens on an n x n chessboard so that no two queens can attack each other.

A queen in a chessboard can attack horizontally, vertically, and diagonally.

Given an integer n, return all distinct solutions to the n-queens puzzle.

Each solution contains a unique board layout where the queen pieces are placed. 'Q' indicates a queen and '.' indicates an empty space.

You may return the answer in any order.

Input: n = 4

Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]

Explanation: There are two different solutions to the 4-queens puzzle.

Input: n = 1

Output: [["Q"]]

You should aim for a solution with O(n!) time and O(n^2) space, where n is the size of the given square board.

class Solution:
    def can_attack(self, row, rows, col, cols, board):
        # Check cols
        r = row - 1
        while r >= 0:
            if board[r][col] == "Q":
                return True

            r -= 1
    
        # Left upper diagonal
        r = row - 1
        c = col - 1
        while r >= 0 and c >= 0:
            if board[r][c] == "Q":
                return True

            r -= 1
            c -= 1

        # Upper right diagonal
        r = row - 1
        c = col + 1
        while r >= 0 and c < cols:
            if board[r][c] == "Q":
                return True

            r -= 1
            c += 1

        # No need to check row -> n, col -> n as they are not filled up yet
        return False

    def solveNQueens(self, n: int) -> List[List[str]]:
        res_list = []

        # board is empty array of rows
        board = []
        # For rows
        for r in range(0, n):
            # Form a row
            row = ["."] * n
            # Append the row to board
            board.append(row)

        def backtrack(r):
            if r == n:
                copy = []
                for row in board:
                    copy.append("".join(row))
                res_list.append(copy)
                return

            for c in range(0, n):
                if self.can_attack(r, n, c, n, board) == False:
                    board[r][c] = "Q"
                    backtrack(r+1)
                    board[r][c] = "."

        backtrack(0)
        return res_list