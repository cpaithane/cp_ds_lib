Minimum Interval to Include Each Query

You are given a 2D integer array intervals, where intervals[i] = [left_i, right_i] represents the ith interval starting at left_i and ending at right_i (inclusive).

You are also given an integer array of query points queries. The result of query[j] is the length of the shortest interval i such that left_i <= queries[j] <= right_i. If no such interval exists, the result of this query is -1.

Return an array output where output[j] is the result of query[j].

Note: The length of an interval is calculated as right_i - left_i + 1.

Input: intervals = [[1,3],[2,3],[3,7],[6,6]], queries = [2,3,1,7,6,8]

Output: [2,2,3,5,1,-1]

Explanation:

Query = 2: The interval [2,3] is the smallest one containing 2, it's length is 2.
Query = 3: The interval [2,3] is the smallest one containing 3, it's length is 2.
Query = 1: The interval [1,3] is the smallest one containing 1, it's length is 3.
Query = 7: The interval [3,7] is the smallest one containing 7, it's length is 5.
Query = 6: The interval [6,6] is the smallest one containing 6, it's length is 1.
Query = 8: There is no interval containing 8.

Constraints:

1 <= intervals.length <= 1000
1 <= queries.length <= 1000
1 <= left_i <= right_i <= 10000
1 <= queries[j] <= 10000

from heapq import heapify, heappush, heappop

class Solution:
    def minInterval(self, intervals: List[List[int]], queries: List[int]) -> List[int]:
        # Use min heap as we want minimum interval.
        # Sort both intervals and queries
        intervals.sort()
        
        # As the ordering queries matter, use dictionary
        res_dict = {}
        min_heap = []
        i = 0

        # Go through each query
        for q in sorted(queries):
            # Go through intervals
            while i < len(intervals) and intervals[i][0] <= q:
                l, r = intervals[i]
                # Store length of each interval along with end
                heappush(min_heap, (r - l + 1, r))
                i += 1

            # Peak only intervals which are valid. That means, the end
            # from min_heap is less than the q, pop heap.
            while min_heap and min_heap[0][1] < q:
                heappop(min_heap)

            if len(min_heap):
                res_dict[q] = min_heap[0][0]
            else:
                res_dict[q] = -1

        res_list = []
        for q in queries:
            res_list.append(res_dict[q])

        return res_list