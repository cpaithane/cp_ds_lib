Sliding Window Maximum

You are given an array of integers nums and an integer k. There is a sliding window of size k that starts at the left edge of the array. The window slides one position to the right until it reaches the right edge of the array.

Return a list that contains the maximum element in the window at each step.

Input: nums = [1,2,1,0,4,2,6], k = 3

Output: [2,2,4,4,6]

Explanation: 
Window position            Max
---------------           -----
[1  2  1] 0  4  2  6        2
 1 [2  1  0] 4  2  6        2
 1  2 [1  0  4] 2  6        4
 1  2  1 [0  4  2] 6        4
 1  2  1  0 [4  2  6]       6

Constraints:

1 <= nums.length <= 1000
-1000 <= nums[i] <= 1000
1 <= k <= nums.length


You should aim for a solution as good or better than O(nlogn) time and O(n) space, where n is the size of the input array.

class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:

        # Empty heap
        heap = []
        res = []

        # Iterate through the nums array
        for i in range(0, len(nums)):
            # Push val and idx to the max heap
            # The value is negated as we want max heap
            # If not negated, the min heap will kick in.
            heapq.heappush(heap, (-nums[i], i))

            # If size of sliding window matches, pop till the top element
            # is within the sliding window
            if i >= k -1:
                # heap[0][1] => Index at top element
                while heap[0][1] <= i - k:
                    heapq.heappop(heap)

                # heap[0][0] => Value of top element
                res.append(-heap[0][0])
            
        return res
