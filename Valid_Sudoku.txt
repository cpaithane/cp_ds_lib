Valid Sudoku
Solved 
You are given a a 9 x 9 Sudoku board board. A Sudoku board is valid if the following rules are followed:

Each row must contain the digits 1-9 without duplicates.
Each column must contain the digits 1-9 without duplicates.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without duplicates.
Return true if the Sudoku board is valid, otherwise return false

Note: A board does not need to be full or be solvable to be valid.

Input: board = 
[["1","2",".",".","3",".",".",".","."],
 ["4",".",".","5",".",".",".",".","."],
 [".","9","8",".",".",".",".",".","3"],
 ["5",".",".",".","6",".",".",".","4"],
 [".",".",".","8",".","3",".",".","5"],
 ["7",".",".",".","2",".",".",".","6"],
 [".",".",".",".",".",".","2",".","."],
 [".",".",".","4","1","9",".",".","8"],
 [".",".",".",".","8",".",".","7","9"]]

Output: true

Input: board = 
[["1","2",".",".","3",".",".",".","."],
 ["4",".",".","5",".",".",".",".","."],
 [".","9","1",".",".",".",".",".","3"],
 ["5",".",".",".","6",".",".",".","4"],
 [".",".",".","8",".","3",".",".","5"],
 ["7",".",".",".","2",".",".",".","6"],
 [".",".",".",".",".",".","2",".","."],
 [".",".",".","4","1","9",".",".","8"],
 [".",".",".",".","8",".",".","7","9"]]

Output: false

Explanation: There are two 1's in the top-left 3x3 sub-box.

Constraints:

board.length == 9
board[i].length == 9
board[i][j] is a digit 1-9 or '.'.

You should aim for a solution as good or better than O(n^2) time and O(n^2) space, where n is the number of rows in the square grid.


We can find the index of each square by the equation (row / 3) * 3 + (col / 3). Then we use hash set for O(1) lookups while inserting the number into its row, column and square it belongs to. We use separate hash maps for rows, columns, and squares.

class Solution:
    def checkValidRow(self, board: List[List[str]]) -> bool:
        for r in range(0, len(board[0])):
            valid_check = set()
            for c in range(0, len(board[0])):
                if board[r][c] == ".":
                    continue
            
                if board[r][c] in valid_check:
                    return False
            
                valid_check.add(board[r][c])

        return True

    def checkValidCol(self, board: List[List[str]]) -> bool:
        for c in range(0, len(board[0])):
            valid_check = set()
            for r in range(0, len(board[0])):
                if board[r][c] == ".":
                    continue
            
                if board[r][c] in valid_check:
                    return False

                valid_check.add(board[r][c])

        return True

    def isValidGrid(self, board: List[List[str]]) -> bool:
        for g in range(9):
            valid_check = set()
            for i in range(3):
                for j in range(3):
                    # // is for division and rounding down.
                    r = ((g//3)*3 + i);
                    c = ((g%3)*3 + j);

                    if board[r][c] == ".":
                        continue

                    if board[r][c] in valid_check:
                        return False

                    valid_check.add(board[r][c])

        return True
    
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        # Check for duplicates in all rows
        # Check whether numbers 1-9 are present
        valid = self.checkValidRow(board)
        if valid == False:
            return False

        valid = self.checkValidCol(board)
        if valid == False:
            return False

        return self.isValidGrid(board)
