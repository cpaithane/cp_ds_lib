Swim in Rising Water

You are given a square 2-D matrix of distinct integers grid where each integer grid[i][j] represents the elevation at position (i, j).

Rain starts to fall at time = 0, which causes the water level to rise. At time t, the water level across the entire grid is t.

You may swim either horizontally or vertically in the grid between two adjacent squares if the original elevation of both squares is less than or equal to the water level at time t.

Starting from the top left square (0, 0), return the minimum amount of time it will take until it is possible to reach the bottom right square (n - 1, n - 1).

Input: grid = [[0,1],[2,3]]

Output: 3

Explanation: For a path to exist to the bottom right square grid[1][1] the water elevation must be at least 3. At time t = 3, the water level is 3.

Input: grid = [
  [0,1,2,10],
  [9,14,4,13],
  [12,3,8,15],
  [11,5,7,6]]
]

Output: 8

Explanation: The water level must be at least 8 to reach the bottom right square. The path is [0, 1, 2, 4, 8, 7, 6].

Constraints:

grid.length == grid[i].length
1 <= grid.length <= 50
0 <= grid[i][j] < n^2

You should aim for a solution with O((n^2)logn) time and O(n^2) space, where n is the number of rows or columns of the square matrix.

from heapq import heapify, heappush, heappop

class Solution:
    def swimInWater(self, grid: List[List[int]]) -> int:
        # No need to have adjacency list as matrix is given.
        rows = len(grid)
        cols = len(grid[0])
        visited = set()
        min_heap = []
        heapify(min_heap)

        # Always start from (0, 0) with weight of 0
        visited.add((0, 0))
        heappush(min_heap, (max(0, grid[0][0]), (0, 0)))

        def push_heap(r, c, tm):
            if (r < 0 or r >= rows or
                c < 0 or c >= cols or
                (r, c) in visited):
                return

            visited.add((r, c))
            # Push maximum of time so far and grid's value to heap.
            heappush(min_heap, (max(tm, grid[r][c]), (r, c)))

        while min_heap:
            tm, (r, c) = heappop(min_heap)

            # return time if it reaches bottom, right corner
            if (r == rows - 1) and (c == cols - 1):
                return tm

            # Traverse in 4 directions
            push_heap(r + 1, c, tm)
            push_heap(r - 1, c, tm)
            push_heap(r, c + 1, tm)
            push_heap(r, c - 1, tm)

        return 0