House Robber

You are given an integer array nums where nums[i] represents the amount of money the ith house has. The houses are arranged in a straight line, i.e. the ith house is the neighbor of the (i-1)th and (i+1)th house.

You are planning to rob money from the houses, but you cannot rob two adjacent houses because the security system will automatically alert the police if two adjacent houses were both broken into.

Return the maximum amount of money you can rob without alerting the police.

Input: nums = [1,1,3,3]

Output: 4

Explanation: nums[0] + nums[2] = 1 + 3 = 4.

Input: nums = [2,9,8,3,6]

Output: 16

Explanation: nums[0] + nums[2] + nums[4] = 2 + 8 + 6 = 16.

Constraints:

1 <= nums.length <= 100
0 <= nums[i] <= 100

You should aim for a solution as good or better than O(n) time and O(n) space, where n is the number of houses.

class Solution:
    def rob(self, nums: List[int]) -> int:
        dp = [-1] * len(nums)

        def dfs(i):
            # Base condition
            if i >= len(nums):
                return 0

            # If the solution of ith is calculated, return
            if dp[i] != -1:
                return dp[i]

            # Choose maximum of (current house and next to next house or
            # next house) to rob
            # Recurrence relationship
            dp[i] = max(dfs(i + 1), nums[i] + dfs(i + 2))
            return dp[i]

        # Always, start from 0th house.
        return dfs(0)