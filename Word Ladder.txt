Word Ladder

You are given two words, beginWord and endWord, and also a list of words wordList. All of the given words are of the same length, consisting of lowercase English letters, and are all distinct.

Your goal is to transform beginWord into endWord by following the rules:

You may transform beginWord to any word within wordList, provided that at exactly one position the words have a different character, and the rest of the positions have the same characters.
You may repeat the previous step with the new word that you obtain, and you may do this as many times as needed.
Return the minimum number of words within the transformation sequence needed to obtain the endWord, or 0 if no such sequence exists.

Input: beginWord = "cat", endWord = "sag", wordList = ["bat","bag","sag","dag","dot"]

Output: 4

Explanation: The transformation sequence is "cat" -> "bat" -> "bag" -> "sag".

Input: beginWord = "cat", endWord = "sag", wordList = ["bat","bag","sat","dag","dot"]

Output: 0

Explanation: There is no possible transformation sequence from "cat" to "sag" since the word "sag" is not in the wordList.

Constraints:

1 <= beginWord.length <= 10
1 <= wordList.length <= 100

You should aim for a solution with O((m ^ 2) * n) time and O((m ^ 2) * n) space, where n is the number of words and m is the length of the word.

class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        # Build the graph with all possible patterns of the word from wordList
        # Do BFS from beginWord to endWord.

        # endWord must be in wordList
        if endWord not in wordList:
            return 0

        # beginWord must in wordList
        wordList.append(beginWord)

        # Build the graph of pattern->list of words
        graph = {}
        for word in wordList:
            for i in range(0, len(word)):
                pattern = word[:i] + "*" + word[i+1:]
                neighbors = graph.get(pattern, [])
                neighbors.append(word)
                graph[pattern] = neighbors

        # Start BFS from beginWord
        q = deque()
        visited = set()
        q.append(beginWord)
        visited.add(beginWord)
        steps = 1

        while q:
            # Go through layers
            for i in range(0, len(q)):
                word = q.popleft()
                if word == endWord:
                    return steps

                # Build the pattern for neighbors
                for j in range(0, len(word)):
                    pattern = word[:j] + "*" + word[j+1:]
                    for n in graph[pattern]:
                        if n not in visited:
                            visited.add(n)
                            q.append(n)
            
            steps += 1

        return 0