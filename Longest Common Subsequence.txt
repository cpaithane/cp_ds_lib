Longest Common Subsequence

Given two strings text1 and text2, return the length of the longest common subsequence between the two strings if one exists, otherwise return 0.

A subsequence is a sequence that can be derived from the given sequence by deleting some or no elements without changing the relative order of the remaining characters.

For example, "cat" is a subsequence of "crabt".
A common subsequence of two strings is a subsequence that exists in both strings.

Input: text1 = "cat", text2 = "crabt" 

Output: 3 

Explanation: The longest common subsequence is "cat" which has a length of 3.

Input: text1 = "abcd", text2 = "abcd"

Output: 4

Input: text1 = "abcd", text2 = "efgh"

Output: 0

Constraints:

1 <= text1.length, text2.length <= 1000
text1 and text2 consist of only lowercase English characters.

class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        # DP
        dp = {}

        def lcsCore(i, j):
            if i >= len(text1) or j >= len(text2):
                return 0

            if (i, j) in dp:
                return dp[(i, j)]

            # If both chars are equal then choose both
            # Else, either choose next from first string or choose
            # next from second string
            if text1[i] == text2[j]:
                dp[(i, j)] = 1 + lcsCore(i + 1, j + 1)
            else:
                dp[(i, j)] = max(lcsCore(i + 1, j), lcsCore(i, j + 1))

            return dp[(i, j)]
        
        return lcsCore(0, 0)

        # Recursive
        def lcsCore(i, j):
            if i >= len(text1) or j >= len(text2):
                return 0

            if text1[i] == text2[j]:
                return 1 + lcsCore(i + 1, j + 1)
            return max(lcsCore(i + 1, j), lcsCore(i, j + 1))

        return lcsCore(0, 0)