Graph Valid Tree

Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.

Input:
n = 5
edges = [[0, 1], [0, 2], [0, 3], [1, 4]]

Output:
true

Input:
n = 5
edges = [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]]

Output:
false

You can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.

You should aim for a solution as good or better than O(V + E) time and O(V + E) space, where V is the number vertices and E is the number of edges in the graph.

class Solution:
    def validTree(self, n: int, edges: List[List[int]]) -> bool:
        graph = {}
        visited = set()

        # Build adjacency list
        for i in range(0, n):
            graph[i] = []

        for edge in edges:
            graph[edge[0]].append(edge[1])
            graph[edge[1]].append(edge[0])

        def is_cycle(node, parent):
            if node in visited:
                return True

            visited.add(node)
            for n in graph[node]:
                if n == parent:
                    continue

                if is_cycle(n, node) == True:
                    return True

            return False

        return is_cycle(0, -1) == False and len(visited) == n