Valid Parentheses
Solved 
You are given a string s consisting of the following characters: '(', ')', '{', '}', '[' and ']'.

The input string s is valid if and only if:

Every open bracket is closed by the same type of close bracket.
Open brackets are closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
Return true if s is a valid string, and false otherwise.

Input: s = "[]"

Output: true

Input: s = "([{}])"

Output: true

Input: s = "[(])"

Output: false

Explanation: The brackets are not closed in the correct order.

Constraints:

1 <= s.length <= 1000

Recommended Time & Space Complexity
You should aim for a solution with O(n) time and O(n) space, where n is the length of the given string.

#include <stack>

class Solution {
public:
    bool isValid(string s) {
        stack<char> st;

        int size = s.size();
        if (size == 0) {
            return true;
        }
        if (size % 2 == 1) {
            return false;
        }
        for (char ch : s) {
            /* If opening bracket, push to stack. */
            if (ch == '(' ||
                ch == '{' ||
                ch == '[') {
                st.push(ch);
            } else if (st.empty()) {
                /*
                 * If string is not exhausted and stack is empty, then invalid char.
                 */
                return false;
            } else {
                /* Else, pop and match. */
                char popped_char = st.top();
                st.pop();
                if (popped_char == '(' && ch != ')' ||
                    popped_char == '{' && ch != '}' ||
                    popped_char == '[' && ch != ']') {
                    return false;
                }
            }
        }
        return st.empty();
    }
};

