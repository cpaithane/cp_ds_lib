Serialize and Deserialize Binary Tree

Implement an algorithm to serialize and deserialize a binary tree.

Serialization is the process of converting an in-memory structure into a sequence of bits so that it can be stored or sent across a network to be reconstructed later in another computer environment.

You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure. There is no additional restriction on how your serialization/deserialization algorithm should work.

Note: The input/output format in the examples is the same as how NeetCode serializes a binary tree. You do not necessarily need to follow this format.

Input: root = [1,2,3,null,null,4,5]

Output: [1,2,3,null,null,4,5]

Input: root = []

Output: []

You should aim for a solution with O(n) time and O(n) space, where n is the number of nodes in the given tree.

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Codec:
    
    # Encodes a tree to a single string.
    def serialize(self, root: Optional[TreeNode]) -> str:
        res_list = []

        def preorder(root):
            nonlocal res_list
            if root == None:
                res_list.append("null")
                return
            else:
                res_list.append(str(root.val))
            
            preorder(root.left)
            preorder(root.right)
        
        preorder(root)
        return ",".join(res_list)

    # Decodes your encoded data to tree.
    def deserialize(self, data: str) -> Optional[TreeNode]:
        res_list = data.split(",")
        root = None
        pre_idx = 0

        def preorder(res_list):
            nonlocal pre_idx, root
            if res_list[pre_idx] == "null":
                pre_idx += 1
                return None

            node = TreeNode(int(res_list[pre_idx]))
            if root == None:
                root = node
            
            pre_idx += 1
            node.left = preorder(res_list)
            node.right = preorder(res_list)
            return node

        return preorder(res_list)