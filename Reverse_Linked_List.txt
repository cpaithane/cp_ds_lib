Reverse Linked List
Solved 
Given the beginning of a singly linked list head, reverse the list, and return the new beginning of the list.

Input: head = [0,1,2,3]

Output: [3,2,1,0]

Input: head = []

Output: []

Constraints:

0 <= The length of the list <= 1000.
-1000 <= Node.val <= 1000

You should aim for a solution with O(n) time and O(1) space, where n is the length of the given list.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode *prev, *cur, *next;
        
        prev = NULL;
        cur = head;

        /* Run till cur becomes NULL as every node should be considered. */
        while (cur != NULL) {
            /* Save next pointer. */
            next = cur->next;

            /* Adjust next pointer of current node as prev. */
            cur->next = prev;

            /* Move ahead. */
            prev = cur;
            cur = next;
        }
        /* Prev pointer points to the reversed head */
        return prev;
    }
};
