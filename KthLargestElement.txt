Kth Largest Element in a Stream
Solved 
Design a class to find the kth largest integer in a stream of values, including duplicates. E.g. the 2nd largest from [1, 2, 3, 3] is 3. The stream is not necessarily sorted.

Implement the following methods:

constructor(int k, int[] nums) Initializes the object given an integer k and the stream of integers nums.
int add(int val) Adds the integer val to the stream and returns the kth largest integer in the stream.

Input:
["KthLargest", [3, [1, 2, 3, 3]], "add", [3], "add", [5], "add", [6], "add", [7], "add", [8]]

Output:
[null, 3, 3, 3, 5, 6]

Explanation:
KthLargest kthLargest = new KthLargest(3, [1, 2, 3, 3]);
kthLargest.add(3);   // return 3
kthLargest.add(5);   // return 3
kthLargest.add(6);   // return 3
kthLargest.add(7);   // return 5
kthLargest.add(8);   // return 6

Constraints:

1 <= k <= 1000
0 <= nums.length <= 1000
-1000 <= nums[i] <= 1000
-1000 <= val <= 1000
There will always be at least k integers in the stream when you search for the kth integer.

You should aim for a solution with O(mlogk) time and O(k) space, where m is the number of times add() is called, and k represents the rank of the largest number to be tracked (i.e., the k-th largest element).

class KthLargest {
private:
    /*
     * The k-th largest element is the smallest element among 
     * the top k largest elements. This means we only need to
     * maintain k elements in our Min-Heap to efficiently determine
     * the k-th largest element. That's why, we need to use min heap
     * and not max heap here. Because, top of the min heap of size k
     * will always point at kth smallest element.
     */

    priority_queue<int, vector<int>, greater<int>> minHeap;
    int k;

public:
    KthLargest(int k, vector<int>& nums) {
        /*
         * Insert values in the vector to the priority queue using
         * add method. Ignore the return value of the add().
         */
        for (int x : nums) {
            this->minHeap.push(x);
        }
        this->k = k;
    }
    
    int add(int val) {
        this->minHeap.push(val);

        /*
         * Pop from minHeap only if its size is greater than k.
         * Return top of the heap after popping.
         */
        while (this->minHeap.size() > this->k) {
            this->minHeap.pop();
        }
        return this->minHeap.top();
    }
};
