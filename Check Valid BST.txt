Valid Binary Search Tree

Given the root of a binary tree, return true if it is a valid binary search tree, otherwise return false.

A valid binary search tree satisfies the following constraints:

The left subtree of every node contains only nodes with keys less than the node's key.
The right subtree of every node contains only nodes with keys greater than the node's key.
Both the left and right subtrees are also binary search trees.

Input: root = [2,1,3]

Output: true

Input: root = [1,2,3]

Output: false

You should aim for a solution with O(n) time and O(n) space, where n is the number of nodes in the given tree.

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        max_val = math.inf
        min_val = -math.inf

        def check_valid(root, min_val, max_val):
            if root == None:
                return True

            if not (min_val < root.val and root.val < max_val):
                return False

            return check_valid(root.left, min_val, root.val) and check_valid(root.right, root.val, max_val)

        return check_valid(root, min_val, max_val)
