Combination Sum

You are given an array of distinct integers nums and a target integer target. Your task is to return a list of all unique combinations of nums where the chosen numbers sum to target.

The same number may be chosen from nums an unlimited number of times. Two combinations are the same if the frequency of each of the chosen numbers is the same, otherwise they are different.

You may return the combinations in any order and the order of the numbers in each combination can be in any order.

Input: 
nums = [2,5,6,9] 
target = 9

Output: [[2,2,5],[9]]

Explanation:
2 + 2 + 5 = 9. We use 2 twice, and 5 once.
9 = 9. We use 9 once.

Input: 
nums = [3,4,5]
target = 16

Output: [[3,3,3,3,4],[3,3,5,5],[4,4,4,4],[3,4,4,5]]

Input: 
nums = [3]
target = 5

Output: []

All elements of nums are distinct.
1 <= nums.length <= 20
2 <= nums[i] <= 30
2 <= target <= 30

You should aim for a solution with O(2^(t/m)) time and O(t/m) space, where t is the given target and m is the minimum value in the given array.

class Solution:
    def combinationSum(self, nums: List[int], target: int) -> List[List[int]]:
        res_list = []
        res = []

        #
        # Simple steps to remember for backtracking problems.
        #
        def combinationSumCore(res, idx, add, target):
            # Define base conditions to break recursion
            # Valid condition
            if add == target:
                res_list.append(res.copy())
                return

            # Define base conditions to break recursion
            # Invalid condition
            if idx >= len(nums) or add > target:
                return

            # Try choosing the element
            res.append(nums[idx])
            # Try to solve the problem
            combinationSumCore(res, idx, add + nums[idx], target)
            # If problem is not solved, remove the element from result
            res.pop()
            # Go for next element to choose
            combinationSumCore(res, idx + 1, add, target)

        combinationSumCore(res, 0, 0, target)
        return res_list