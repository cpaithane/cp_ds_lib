Construct Binary Tree from Preorder and Inorder Traversal

You are given two integer arrays preorder and inorder.

preorder is the preorder traversal of a binary tree
inorder is the inorder traversal of the same tree
Both arrays are of the same size and consist of unique values.
Rebuild the binary tree from the preorder and inorder traversals and return its root.

Input: preorder = [1,2,3,4], inorder = [2,1,3,4]

Output: [1,2,3,null,null,null,4]

Input: preorder = [1], inorder = [1]

Output: [1]

You should aim for a solution with O(n) time and O(n) space, where n is the number of nodes.

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:
        n = len(preorder)
        root = None
        search_dict = {}
        pre_idx = 0

        if n == 0:
            return None

        for i in range(0, len(inorder)):
            search_dict[inorder[i]] = i

        def buildTreeCore(left, right):
            nonlocal preorder, inorder, root, search_dict, n, pre_idx

            if left < 0 or right > n or left > right:
                return None

            val = preorder[pre_idx]
            pre_idx += 1
            node = TreeNode(val, None, None)
            if root == None:
                root = node
            
            # Search val in inorder
            idx = search_dict.get(val)

            # Elements from 0 -> idx - 1 are part of left subtree
            # Elements from idx -> n - 1 are part of right subtree
            node.left = buildTreeCore(left, idx - 1)
            node.right = buildTreeCore(idx + 1, right)
            return node

        buildTreeCore(0, n-1)
        return root