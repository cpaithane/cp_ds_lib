Path With Min Effort

You are a hiker preparing for an upcoming hike. You are given heights, a 2D array of size rows x columns, where heights[row][col] represents the height of cell (row, col). You are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e., 0-indexed). You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.

A route's effort is the maximum absolute difference in heights between two consecutive cells of the route.

Return the minimum effort required to travel from the top-left cell to the bottom-right cell.

Input: heights = [[1,2,2],[3,8,2],[5,3,5]]
Output: 2
Explanation: The route of [1,3,5,3,5] has a maximum absolute difference of 2 in consecutive cells.
This is better than the route of [1,2,2,2,5], where the maximum absolute difference is 3.

Input: heights = [[1,2,3],[3,8,4],[5,3,5]]
Output: 1
Explanation: The route of [1,2,3,4,5] has a maximum absolute difference of 1 in consecutive cells, which is better than route [1,3,5,3,5].

Input: heights = [[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]]
Output: 0
Explanation: This route does not require any effort.

Constraints:

rows == heights.length
columns == heights[i].length
1 <= rows, columns <= 100
1 <= heights[i][j] <= 106

class Solution:
    def minimumEffortPath(self, heights: List[List[int]]) -> int:
        rows = len(heights)
        cols = len(heights[0])
        min_heap = []
        heapq.heapify(min_heap)
        visited = set()
        directions = [(1, 0), (-1, 0), (0, -1), (0, 1)]

        heapq.heappush(min_heap, (0, 0, 0))

        while min_heap:
            diff, r, c = heapq.heappop(min_heap)

            if (r, c) in visited:
                continue

            if (r == rows - 1) and (c == cols - 1):
                return diff

            visited.add((r, c))

            for d in directions:
                n_r = d[0] + r
                n_c = d[1] + c

                if (n_r < 0 or n_c < 0 or 
                    n_r >= rows or n_c >= cols or 
                    (n_r, n_c) in visited):
                    continue

                new_diff = max(diff, abs(heights[r][c] - heights[n_r][n_c]))
                heapq.heappush(min_heap, (new_diff, n_r, n_c))

        return 0