Regular Expression Matching

You are given an input string s consisting of lowercase english letters, and a pattern p consisting of lowercase english letters, as well as '.', and '*' characters.

Return true if the pattern matches the entire input string, otherwise return false.

'.' Matches any single character
'*' Matches zero or more of the preceding element.

Return true if the pattern matches the entire input string, otherwise return false.

'.' Matches any single character
'*' Matches zero or more of the preceding element.

Input: s = "aa", p = ".b"

Output: false

Explanation: Regardless of which character we choose for the '.' in the pattern, we cannot match the second character in the input string.

Input: s = "nnn", p = "n*"

Output: true

Explanation: '*' means zero or more of the preceding element, 'n'. We choose 'n' to repeat three times.

Input: s = "xyz", p = ".*z"

Output: true

Explanation: The pattern ".*" means zero or more of any character, so we choose ".." to match "xy" and "z" to match "z".

Constraints:

1 <= s.length <= 20
1 <= p.length <= 20
Each appearance of '*', will be preceded by a valid character or '.'.

class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        # DP - Topdown in O(m*n)
        len_s = len(s)
        len_p = len(p)
        dp = {}

        def recurse(i, j):
            if (i, j) in dp:
                return dp[(i, j)]

            # Base condition
            if j == len_p and i == len_s:
                return True

            if j >= len_p:
                return False

            # Current char should match or p should have .
            match = i < len_s  and (s[i] == p[j] or p[j] == ".")

            # If next char in p is *, either move p by 2 or s by 1.
            # Current char in p should match with current char in s.
            if (j + 1 < len_p) and p[j + 1] == "*":
                dp[(i, j)] = (recurse(i, j + 2) or (match and recurse(i + 1, j)))
                return dp[(i, j)]

            # If chars match in s and p or p has ., then
            # move s and p both by 1
            if match:
                dp[(i, j)] = recurse(i + 1, j + 1)
                return dp[(i, j)]
            
            # Chars mismatch, return False
            dp[(i, j)] = False
            return False

        return recurse(0, 0)      

        # Recursive O(2^n)
        len_s = len(s)
        len_p = len(p)

        def recurse(i, j):
            # Base condition
            if j == len_p and i == len_s:
                return True

            if j >= len_p:
                return False

            match = i < len_s  and (s[i] == p[j] or p[j] == ".")

            # If next char in p is *, either move p by 2 or s by 1.
            if (j + 1 < len_p) and p[j + 1] == "*":
                return (recurse(i, j + 2) or (match and recurse(i + 1, j)))

            # If chars match in s and p or p has ., then
            # move s and p both by 1
            if match:
                return recurse(i + 1, j + 1)
            
            # Chars mismatch, return False
            return False

        return recurse(0, 0)