Binary Tree Preorder Traversal

Given the root of a binary tree, return the preorder traversal of its nodes' values.

 

Example 1:

Input: root = [1,null,2,3]

Output: [1,2,3]

Example 2:

Input: root = [1,2,3,4,5,null,8,null,null,6,7,9]

Output: [1,2,4,5,6,7,3,8,9]

Example 3:

Input: root = []

Output: []

Example 4:

Input: root = [1]

Output: [1]

 

Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        res_list = []
        stack = []

        while root or stack:
            while root:
                res_list.append(root.val)
                stack.append(root)
                root = root.left

            root = stack.pop()
            root = root.right

        return res_list

        def traverse(root):
            if root == None:
                return

            res_list.append(root.val)
            traverse(root.left)
            traverse(root.right)

        traverse(root)
        return res_list
