Minimum Path Sum

Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

Example 1:
Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.
Example 2:

Input: grid = [[1,2,3],[4,5,6]]
Output: 12
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 200
0 <= grid[i][j] <= 200

class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        rows = len(grid)
        cols = len(grid[0])
        dp = {}

        def recurse(r, c):
            if (r, c) in dp:
                return dp[(r, c)]

            if r >= rows or c >= cols:
                dp[(r, c)] = float("inf")
                return float("inf")

            if r == (rows - 1) and c == (cols - 1):
                dp[(r, c)] = grid[r][c]
                return grid[r][c]

            res = grid[r][c] + min(recurse(r + 1, c), recurse(r, c + 1))
            dp[(r, c)] = res
            return res

        return recurse(0, 0)
