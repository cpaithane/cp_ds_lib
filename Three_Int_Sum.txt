3Sum
Solved 
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] where nums[i] + nums[j] + nums[k] == 0, and the indices i, j and k are all distinct.

The output should not contain any duplicate triplets. You may return the output and the triplets in any order.

Input: nums = [-1,0,1,2,-1,-4]

Output: [[-1,-1,2],[-1,0,1]]

Explanation:
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].

Example 2:

Input: nums = [0,1,1]

Output: []

Explanation: The only possible triplet does not sum up to 0.

Input: nums = [0,0,0]

Output: [[0,0,0]]

Explanation: The only possible triplet sums up to 0.

Constraints:

3 <= nums.length <= 1000
-10^5 <= nums[i] <= 10^5

You should aim for a solution with O(n^2) time and O(1) space, where n is the size of the input array.

class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        res = []

        # Sort the array first
        nums.sort()

        for i in range(0, len(nums)):

            # As array is sorted, no possibility of having negative num.
            if nums[i] > 0:
                break

            # If prev num is same as that of cur, then the pair is already
            # considered
            if i > 0 and nums[i] == nums[i - 1]:
                continue
            
            j = i + 1
            e = len(nums) - 1

            while j < e:
                t = (nums[i] + nums[j]) * (-1)

                if t == nums[e]:
                    tmp_res = []
                    tmp_res.append(nums[i])
                    tmp_res.append(nums[j])
                    tmp_res.append(nums[e])

                    res.append(tmp_res)
                    
                    j += 1
                    e -= 1
                    while nums[j] == nums[j-1] and j < e:
                        j += 1
                    

                elif t < nums[e]:
                    e -= 1
                
                else:
                    j += 1

        return res
