Products of Array Except Self
Solved 
Given an integer array nums, return an array output where output[i] is the product of all the elements of nums except nums[i].

Each product is guaranteed to fit in a 32-bit integer.

Follow-up: Could you solve it in 
O
(
n
)
O(n) time without using the division operation?

Input: nums = [1,2,4,6]

Output: [48,24,12,8]

Input: nums = [-1,0,1,2,3]

Output: [0,-6,0,0,0]

Constraints:

2 <= nums.length <= 1000
-20 <= nums[i] <= 20

You should aim for a solution as good or better than O(n) time and O(n) space, where n is the size of the input array.

We can use the prefix and suffix technique. First, we iterate from left to right and store the prefix products for each index in a prefix array, excluding the current index's number. Then, we iterate from right to left and store the suffix products for each index in a suffix array, also excluding the current index's number. Can you figure out the solution from here?

class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        n = len(nums)
        
        #
        # Init the pre, suff and res lists of n elements with 0
        #
        pre_mult = [0] * n
        suff_mult = [0] * n
        res = [0] * n
        mult = 1
        
        pre_mult[0] = suff_mult[n-1] = 1

        # From 1 to n
        for i in range(1, n):     
            mult = mult * nums[i-1]
            pre_mult[i] = mult

        mult = 1
        # From n-2 to 0
        for i in range(len(nums) - 2, -1, -1):
            mult = mult * nums[i+1]
            suff_mult[i] = mult
        
        for i in range(0, n):
            res[i] = (pre_mult[i] * suff_mult[i])
        
        return res
