Alien Dictionary

There is a foreign language which uses the latin alphabet, but the order among letters is not "a", "b", "c" ... "z" as in English.

You receive a list of non-empty strings words from the dictionary, where the words are sorted lexicographically based on the rules of this new language.

Derive the order of letters in this language. If the order is invalid, return an empty string. If there are multiple valid order of letters, return any of them.

A string a is lexicographically smaller than a string b if either of the following is true:

The first letter where they differ is smaller in a than in b.
There is no index i such that a[i] != b[i] and a.length < b.length.


Input: ["z","o"]

Output: "zo"


Explanation:
From "z" and "o", we know 'z' < 'o', so return "zo".


Input: ["hrn","hrf","er","enn","rfnn"]

Output: "hernf"

Explanation:

from "hrn" and "hrf", we know 'n' < 'f'
from "hrf" and "er", we know 'h' < 'e'
from "er" and "enn", we know get 'r' < 'n'
from "enn" and "rfnn" we know 'e'<'r'
so one possibile solution is "hernf"
Constraints:

The input words will contain characters only from lowercase 'a' to 'z'.
1 <= words.length <= 100
1 <= words[i].length <= 100

You should aim for a solution with O(N + V + E) time and O(V + E) space, where N is the sum of the lengths of all the strings, V is the number of unique characters (vertices), and E is the number of edges.

class Solution:
    def foreignDictionary(self, words: List[str]) -> str:
        # Build adjacency list
        # char with set(). set is used because it needs unique set of 
        # adjacent chars
        # Topological sort. If there is cycle, return invalid.

        graph = {}
        for word in words:
            for ch in word:
                graph[ch] = set()

        for i in range (0, len(words) - 1):
            w1 = words[i]
            w2 = words[i + 1]
            min_len = min(len(w1), len(w2))

            if len(w1) > len(w2) and w1[:min_len] == w2[:min_len]:
                return ""

            for j in range(min_len):
                if w1[j] != w2[j]:
                    graph[w1[j]].add(w2[j])
                    break

        visited = {}
        res = []

        def dfs(c):
            if c in visited:
                return visited[c]

            # True here means, in process of DFS or not yet visited.
            visited[c] = True

            for n in graph[c]:
                if dfs(n) == True:
                    return True

            # False here means, visited fully.
            visited[c] = False
            res.append(c)
            return False

        for c in graph:
            # Detected a cycle, so invalid.
            if dfs(c) == True:
                return ""
        
        # As reverse DFS is done, reverse the res list
        res = reversed(res)
        return "".join(res)
