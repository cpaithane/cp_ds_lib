Maximum Depth of Binary Tree

Given the root of a binary tree, return its depth.

The depth of a binary tree is defined as the number of nodes along the longest path from the root node down to the farthest leaf node.

Input: root = [1,2,3,null,null,4]

Output: 3

Input: root = []

Output: 0

You should aim for a solution with O(n) time and O(n) space, where n is the number of nodes in the tree.

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        # Use recursion for finding depth
        if root == None:
            return 0
        
        if root.left == None and root.right == None:
            return 1

        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))
        