Edit Distance

You are given two strings word1 and word2, each consisting of lowercase English letters.

You are allowed to perform three operations on word1 an unlimited number of times:

Insert a character at any position
Delete a character at any position
Replace a character at any position
Return the minimum number of operations to make word1 equal word2.

Input: word1 = "monkeys", word2 = "money"

Output: 2

Explanation:
monkeys -> monkey (remove s)
monkey -> monkey (remove k)

Input: word1 = "neatcdee", word2 = "neetcode"

Output: 3

Explanation:
neatcdee -> neetcdee (replace a with e)
neetcdee -> neetcde (remove last e)
neetcde -> neetcode (insert o)

Constraints:

0 <= word1.length, word2.length <= 100
word1 and word2 consist of lowercase English letters.

class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        # DP
        dp = {}

        def core(i, j):
            if i == len(word1):
                return len(word2) - j

            if j == len(word2):
                return len(word1) - i

            if (i, j) in dp:
                return dp[(i, j)]

            if word1[i] == word2[j]:
                dp[(i, j)] = core(i + 1, j + 1)
            else:
                res = core(i + 1, j)
                res = min(res, core(i, j + 1))
                res = min(res, core(i + 1, j + 1))
                dp[(i, j)] = 1 + res

            return dp[(i, j)]

        # Recursive
        def core(i, j):
            if i == len(word1):
                return len(word2) - j

            if j == len(word2):
                return len(word1) - i

            if word1[i] == word2[j]:
                return core(i + 1, j + 1)
            else:
                res = core(i + 1, j)
                res = min(res, core(i, j + 1))
                res = min(res, core(i + 1, j + 1))
                return 1 + res

        return core(0, 0)