Remove Node From End of Linked List

You are given the beginning of a linked list head, and an integer n.

Remove the nth node from the end of the list and return the beginning of the list.

Input: head = [1,2,3,4], n = 2

Output: [1,2,4]

Input: head = [5], n = 1

Output: []

Input: head = [1,2], n = 2

Output: [2]

You should aim for a solution with O(N) time and O(1) space, where N is the length of the given list.

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        prev = None
        tmp = head

        while tmp and n > 0:
            tmp = tmp.next
            n -= 1

        # The n is pointing at the head of the list
        if tmp == None and n == 0:
            return head.next
        
        tmp_head = head
        while tmp != None:
            prev = tmp_head
            tmp_head = tmp_head.next
            tmp = tmp.next

        # tmp_head points to the nth node
        if prev:
            prev.next = tmp_head.next
        else:
            head = head.next

        return head