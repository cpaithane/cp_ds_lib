Interleaving String

You are given three strings s1, s2, and s3. Return true if s3 is formed by interleaving s1 and s2 together or false otherwise.

Interleaving two strings s and t is done by dividing s and t into n and m substrings respectively, where the following conditions are met

|n - m| <= 1, i.e. the difference between the number of substrings of s and t is at most 1.
s = s1 + s2 + ... + sn
t = t1 + t2 + ... + tm
Interleaving s and t is s1 + t1 + s2 + t2 + ... or t1 + s1 + t2 + s2 + ...
You may assume that s1, s2 and s3 consist of lowercase English letters.


Input: s1 = "aaaa", s2 = "bbbb", s3 = "aabbbbaa"

Output: true

Explanation: We can split s1 into ["aa", "aa"], s2 can remain as "bbbb" and s3 is formed by interleaving ["aa", "aa"] and "bbbb".

Input: s1 = "", s2 = "", s3 = ""

Output: true

Input: s1 = "abc", s2 = "xyz", s3 = "abxzcy"

Output: false

Explanation: We can't split s3 into ["ab", "xz", "cy"] as the order of characters is not maintained.

Constraints:

0 <= s1.length, s2.length <= 50
0 <= s3.length <= 100

class Solution:
    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:
        # DP
        dp = {}

        def core(i, j, k):
            if k == len(s3):
                return (i == len(s1)) and (j == len(s2))

            if (i, j) in dp:
                return dp[(i, j)]

            res = False
            if i < len(s1) and s1[i] == s3[k]:
                res = core(i + 1, j, k + 1)

            if not res and j < len(s2) and s2[j] == s3[k]:
                res = core(i, j + 1, k + 1)

            dp[(i, j)] = res
            return res

        return core(0, 0, 0)

        # Recursive
        #
        # Start from 0 of all the strings
        # If char in s3 matches s1, go for next in s1
        # If char in s3 matches s2, go for next in s2
        # If k reaches len(s3), then check if i and j has reached their
        # end of the strings.
        #
        def core(i, j, k):
            if k == len(s3):
                return (i == len(s1)) and (j == len(s2))

            if i < len(s1) and s1[i] == s3[k]:
                if core(i + 1, j, k + 1):
                    return True

            if j < len(s2) and s2[j] == s3[k]:
                if core(i, j + 1, k + 1):
                    return True

            # n - m goes beyond 1
            return False

        return core(0, 0, 0)