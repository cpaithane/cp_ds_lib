Binary Tree Right Side View

You are given the root of a binary tree. Return only the values of the nodes that are visible from the right side of the tree, ordered from top to bottom.

Input: root = [1,2,3]

Output: [1,3]

Input: root = [1,2,3,4,5,6,7]

Output: [1,3,7]

You should aim for a solution with O(n) time and O(n) space, where n is the number of nodes in the given tree.

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:
        queue = []
        res_list = []
        level_dict = {}
        level = 0

        if root == None:
            return []

        queue.append((root, level))

        while len(queue) != 0:
            node, level = queue.pop(0)

            level_list = level_dict.get(level, [])
            level_list.append(node.val)
            level_dict[level] = level_list

            if node.left != None:
                queue.append((node.left, level + 1))

            if node.right != None:
                queue.append((node.right, level + 1))

        for level, level_list in level_dict.items():
            res_list.append(level_list[len(level_list) - 1])

        return res_list